install.packages ("tm")
install.packages ("Matrix", "RCurl", "XML", "reshape2", "ggplot2", "irr", " "Rjava", "openNLP", "igraph", "topicmodels", "reshape2", "ggplot2", "e1071", "RCurl", "wordcloud")
> install.packages ("Matrix", "RCurl", "XML", "reshape2", "ggplot2", "irr", " "Rjava", "openNLP", "igraph", "topicmodels", "reshape2", "ggplot2", "e1071", "RCurl", "wordcloud")
install.packages ("Matrix", "RCurl", "XML", "reshape2", "ggplot2", "irr", " "Rjava", "openNLP", "igraph", "topicmodels", "reshape2", "ggplot2", "e1071", "RCurl", "wordcloud")
install.packages ("Matrix")
install.packages("RCurl")
install.packages ("XML")
install.packages ("reshape2")
install.packages ("ggplot2")
install.packages ("irr")
install.packages ("Rjava")
install.packages ("rJava")
install.packages ("openNLP")
install.packages ("igraph")
install.packages ("topicmodels")
install.packages ("e1071")
install.packages ("RCurl")
install.packages ("wordcloud")
x <- rnorm(100)
plot(x)
m <- "apples"
m
n <- apples
n <- m
n
n+2
datum <- strptime(c("20171202230000", "20180405110000"), format = "%Y%m%d%H%M%s")
datum
library(lubridate)
datum <- ymd_hm(c("201808030730", "201702260000", "20100226010000"))
datum
#Beispiel-Data Frame
Bsp_df <- data.frame(id=c(01,02,03,04), name=c("Ant", "Bet", "Cat", "Dowd"), age=c(14, 15, 16,18), race=c("WeiÃ", "Schwarz", "SÃ¼dasiatisch", "Schwarz"))
Bsp_df$race <- factor(Bsp_df$race)
Bsp_df$id <- factor(Bsp_df$id)
Bsp_df$name <- as.character(Bsp_df$name)
str(Bsp_df)
levels(Bsp_df$race)
summary(Bsp_df$race)
Bsp_df$race
as.character(Bsp_df$race)
Bsp_df$name
factor(Bsp_df$name)
Bsp_df$id
as.numeric(Bsp_df$id)
as.numeric(as.character(Bsp_df$id))
#Functino Percent Change
percent_change <- function(firstNo, secondNo)
{
pc <- (secondNo-firstNo)/firstNo*100
return(pc)
}
percent_change(300,250)
install.packages("usethis")
usethis::use_course("https://github.com/r-journalism/learn-chapter-3/archive/master.zip")
install.packages("DT")
usethis::use_course("https://github.com/r-journalism/learn-chapter-6/archive/master.zip")
setwd("C:/Users/Antj/Desktop/2018 GESIS/R Course Journalism/learn-chapter-testsAG")
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(readr)
library(ggplot2)
library(maptools)
library(dplyr)
library(data.table)
library(tidyverse)
library(viridis)
#The data was not useful in its original state, as the .csv document was not accordingly formatted. Hence, the relevant FIVE (regional) data sets had to be extracted beforehand manually.
PopTeesH <- read_csv("raw_data/TeesH.csv")
setwd("C:/Users/Antj/Desktop/2018 GESIS/R Course Journalism/learn-chapter-testsAG")
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(readr)
library(ggplot2)
library(maptools)
library(dplyr)
library(data.table)
library(tidyverse)
library(viridis)
#The data was not useful in its original state, as the .csv document was not accordingly formatted. Hence, the relevant FIVE (regional) data sets had to be extracted beforehand manually.
PopTeesH <- read_csv("raw_data/TeesH.csv")
PopTeesS <- read_csv("raw_data/TeesS.csv")
PopTeesM <- read_csv("raw_data/TeesM.csv")
PopTeesR <- read_csv("raw_data/TeesR.csv")
PopTeesD <- read_csv("raw_data/TeesD.csv")
#In preparation to merge the five data sets to one whole we need to make some arrangements, such as relabeling the Variable Names. Each variable receives now a regional designation.
names(PopTeesH) <- paste(names(PopTeesH), sep="_", "H")
names(PopTeesS) <- paste(names(PopTeesS), sep="_", "S")
names(PopTeesM) <- paste(names(PopTeesM), sep="_", "M")
names(PopTeesR) <- paste(names(PopTeesR), sep="_", "R")
names(PopTeesD) <- paste(names(PopTeesD), sep="_", "D")
#Here, we create one common column name to all five data sets, in order to be able to merge them in the next step.
colnames(PopTeesD)[1] <- "Age_Group"
colnames(PopTeesH)[1] <- "Age_Group"
colnames(PopTeesM)[1] <- "Age_Group"
colnames(PopTeesR)[1] <- "Age_Group"
colnames(PopTeesS)[1] <- "Age_Group"
#Merging the five data sets
PopTees2 <- merge(PopTeesD, PopTeesH, by="Age_Group")
PopTees2 <- merge(PopTees2, PopTeesM, by="Age_Group")
PopTees2 <- merge(PopTees2, PopTeesR, by="Age_Group")
PopTees2 <- merge(PopTees2, PopTeesS, by="Age_Group")
datatable(PopTees2, extensions = 'Buttons', options = list(
dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf', 'print')
))
library(sf)
library(readr)
library(ggplot2)
library(maptools)
library(dplyr)
library(data.table)
library(tidyverse)
library(viridis)
#The data was not useful in its original state, as the .csv document was not accordingly formatted. Hence, the relevant FIVE (regional) data sets had to be extracted beforehand manually.
PopTeesH <- read_csv("raw_data/TeesH.csv")
PopTeesS <- read_csv("raw_data/TeesS.csv")
PopTeesM <- read_csv("raw_data/TeesM.csv")
PopTeesR <- read_csv("raw_data/TeesR.csv")
PopTeesD <- read_csv("raw_data/TeesD.csv")
#In preparation to merge the five data sets to one whole we need to make some arrangements, such as relabeling the Variable Names. Each variable receives now a regional designation.
names(PopTeesH) <- paste(names(PopTeesH), sep="_", "H")
names(PopTeesS) <- paste(names(PopTeesS), sep="_", "S")
names(PopTeesM) <- paste(names(PopTeesM), sep="_", "M")
names(PopTeesR) <- paste(names(PopTeesR), sep="_", "R")
names(PopTeesD) <- paste(names(PopTeesD), sep="_", "D")
#Here, we create one common column name to all five data sets, in order to be able to merge them in the next step.
colnames(PopTeesD)[1] <- "Age_Group"
colnames(PopTeesH)[1] <- "Age_Group"
colnames(PopTeesM)[1] <- "Age_Group"
colnames(PopTeesR)[1] <- "Age_Group"
colnames(PopTeesS)[1] <- "Age_Group"
#Merging the five data sets
PopTees2 <- merge(PopTeesD, PopTeesH, by="Age_Group")
PopTees2 <- merge(PopTees2, PopTeesM, by="Age_Group")
PopTees2 <- merge(PopTees2, PopTeesR, by="Age_Group")
PopTees2 <- merge(PopTees2, PopTeesS, by="Age_Group")
#Tidying up the data set
PopTees3 <- PopTees2[-1, ]
View(PopTees3)
library(xlsx)
write.xlsx(PopTees3, file = "PopTees3.xlsx", col.names = TRUE, row.names = FALSE)
PT4 <- read.xlsx("PopTees4.xlsx", sheetName = 1)
#Selecting Columns and calculating percentage of how many people live in couples, and how many do not
colnames(PT4)
PT5 <- mutate(PT4,
Living_Alone_D=round(`ALL.PEOPLE...Not.living.in.a.couple_D`/`ALL.PEOPLE...Total.D_D`*100, digits=1))
PT5 <- mutate(PT5,
Living_Alone_H=round(`ALL.PEOPLE...Not.living.in.a.couple_H`/`ALL.PEOPLE...Total.H_H`*100, digits=1))
PT5 <- mutate(PT5,
Living_Alone_M=round(`ALL.PEOPLE...Not.living.in.a.couple_M`/`ALL.PEOPLE...Total.M_M`*100, digits=1))
PT5 <- mutate(PT5,
Living_Alone_R=round(`ALL.PEOPLE...Not.living.in.a.couple_R`/`ALL.PEOPLE...Total.R_R`*100, digits=1))
PT5 <- mutate(PT5,
Living_Alone_S=round(`ALL.PEOPLE...Not.living.in.a.couple_S`/`ALL.PEOPLE...Total.S_S`*100, digits=1))
#For a better calculation, I flip the data table - so rows become columns, and vice versa. For this, I have to first select the columns which interest me most - the regional share of people living not in a couple for each area.
PT6 <- PT5[, c(1, 47:51)]
PT7 <- transpose(PT6)
PT8 <- PT7
# get row and colnames in order
colnames(PT8) <- rownames(PT6)
View(PT6)
library(ggplot2)
ggplot(data=PT8,
aes(x=Location, y=`All 65+`, fill=`ALL PEOPLE`), size=2)+
theme(legend.position="none")+
ggtitle(label="People older than 65 not living in couples / Teesside Valley area")+
xlab(label="Tees Valley area")+
ylab(label="People above 65")+
geom_bar(stat="identity", position="dodge", colour="black", size=1)
as.data.frame("PT6")
data("PT6")
PT7 <- transpose(PT6)
PT6 <- PT5[, c(1, 47:51)]
as.data.frame("PT6")
PT7 <- transpose(PT6)
#If this does not work by any chance (as it does not now with me), pull the data frame from here for the bar plot:
write.xlsx(PT6, file = "PT6.xlsx", col.names = TRUE, row.names = FALSE)
#If this does not work by any chance (as it does not now with me), pull the data frame from here for the bar plot:
write.xlsx(PT6, file = "PT6.xlsx", col.names = TRUE, row.names = FALSE)
PT7 <- read.xlsx("PT7_Replace.xlsx", sheetName = 1)
library(ggplot2)
ggplot(data=PT7,
aes(x=Location, y=`All 65+`, fill=`ALL PEOPLE`), size=2)+
theme(legend.position="none")+
ggtitle(label="People older than 65 not living in couples / Teesside Valley area")+
xlab(label="Tees Valley area")+
ylab(label="People above 65")+
geom_bar(stat="identity", position="dodge", colour="black", size=1)
View(PT7)
PT7R <- read.xlsx("PT7_Replace.xlsx", sheetName = 1)
PT7R$Location <- c("Darlington", "Hartlepool", "Middlesbrough", "Redcar and Cleveland", "Stockton-on-Tees")
library(ggplot2)
ggplot(data=PT7,
aes(x=Location, y=`All 65+`, fill=`ALL PEOPLE`), size=2)+
theme(legend.position="none")+
ggtitle(label="People older than 65 not living in couples / Teesside Valley area")+
xlab(label="Tees Valley area")+
ylab(label="People above 65")+
geom_bar(stat="identity", position="dodge", colour="black", size=1)
ggplot(data=PT7R,
aes(x=Location, y=`All 65+`, fill=`ALL PEOPLE`), size=2)+
theme(legend.position="none")+
ggtitle(label="People older than 65 not living in couples / Teesside Valley area")+
xlab(label="Tees Valley area")+
ylab(label="People above 65")+
geom_bar(stat="identity", position="dodge", colour="black", size=1)
View(PT7R)
colnames(PT7R)
ggplot(data=PT7R,
aes(x=Location, y=`All.65.`, fill=`ALL.PEOPLE`), size=2)+
theme(legend.position="none")+
ggtitle(label="People older than 65 not living in couples / Teesside Valley area")+
xlab(label="Tees Valley area")+
ylab(label="People above 65")+
geom_bar(stat="identity", position="dodge", colour="black", size=1)
PT6 <- PT5[, c(1, 47:51)]
#Selecting Columns and calculating percentage of how many people live in couples, and how many do not
colnames(PT4)
PT5 <- mutate(PT4,
Living_Alone_D=round(`ALL.PEOPLE...Not.living.in.a.couple_D`/`ALL.PEOPLE...Total.D_D`*100, digits=1))
PT5 <- mutate(PT5,
Living_Alone_H=round(`ALL.PEOPLE...Not.living.in.a.couple_H`/`ALL.PEOPLE...Total.H_H`*100, digits=1))
PT5 <- mutate(PT5,
Living_Alone_M=round(`ALL.PEOPLE...Not.living.in.a.couple_M`/`ALL.PEOPLE...Total.M_M`*100, digits=1))
PT5 <- mutate(PT5,
Living_Alone_R=round(`ALL.PEOPLE...Not.living.in.a.couple_R`/`ALL.PEOPLE...Total.R_R`*100, digits=1))
PT5 <- mutate(PT5,
Living_Alone_S=round(`ALL.PEOPLE...Not.living.in.a.couple_S`/`ALL.PEOPLE...Total.S_S`*100, digits=1))
#For a better calculation, I flip the data table - so rows become columns, and vice versa. For this, I have to first select the columns which interest me most - the regional share of people living not in a couple for each area.
#This section does not work properly at the moment, so I need to hide it. It works mostly, but then it suddenly stops and creates a list during the flipping instead of a data table.
PT6 <- PT5[, c(1, 47:51)]
#as.data.frame("PT6")
#data("PT6")
#PT7 <- transpose(PT6)
#PT8 <- PT7
# get row and colnames in order
#colnames(PT8) <- rownames(PT6)
#rownames(PT8) <- colnames(PT6)
#colnames(PT8) = PT8[1, ]
#PT8=PT8[-1,]
#Now I create for the bar plot an additional column containing the labelling of the regions.
#PT8$Location <- c("Darlington", "Hartlepool", "Middlesbrough", "Redcar and Cleveland", "Stockton-on-Tees")
#As this currently does not work properly with me, pull the data frame from here for the bar plot:
write.xlsx(PT6, file = "PT6.xlsx", col.names = TRUE, row.names = FALSE)
PT7R <- read.xlsx("PT7_Replace.xlsx", sheetName = 1)
PT7R$Location <- c("Darlington", "Hartlepool", "Middlesbrough", "Redcar and Cleveland", "Stockton-on-Tees")
colnames(PT7R)
#Reducing Rows
PopTees5 <- PopTees4[-c(1:11), ]
#We use the data set from before, here I start with this step again.
PopTees4 <- read.xlsx("PopTees34xlsx", sheetName = 1)
#We use the data set from before, here I start with this step again.
PopTees4 <- read.xlsx("PopTees4.xlsx", sheetName = 1)
#Reducing Rows
PopTees5 <- PopTees4[-c(1:11), ]
rownames(PopT) <- colnames(PopTees7)
PopTees7 <- PopTees6[, c(1, 12:16)]
#
